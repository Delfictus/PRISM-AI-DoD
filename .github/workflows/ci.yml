# CI Pipeline for PRISM-AI API Server
# Runs on every push and pull request

name: Continuous Integration

on:
  push:
    branches: [ worker-8-finance-deploy, parallel-development, main ]
  pull_request:
    branches: [ worker-8-finance-deploy, parallel-development, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check
        working-directory: 03-Source-Code

  # Run Clippy lints
  clippy:
    name: Clippy Lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: 03-Source-Code/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Clippy
        run: cargo clippy --all-features --all-targets -- -D warnings
        working-directory: 03-Source-Code

  # Build and test
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            03-Source-Code/target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --verbose --features api_server
        working-directory: 03-Source-Code

      - name: Run tests
        run: cargo test --verbose --features api_server
        working-directory: 03-Source-Code

      - name: Build API server binary
        run: cargo build --release --bin api_server --features api_server
        working-directory: 03-Source-Code

      - name: Upload binary artifact
        if: matrix.rust == 'stable'
        uses: actions/upload-artifact@v3
        with:
          name: api-server-binary
          path: 03-Source-Code/target/release/api_server
          retention-days: 7

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run cargo-audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Check documentation
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Check documentation
        run: cargo doc --no-deps --features api_server
        working-directory: 03-Source-Code
        env:
          RUSTDOCFLAGS: -D warnings

  # Integration tests (if we add them)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run integration tests
        run: cargo test --test '*' --features api_server
        working-directory: 03-Source-Code

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [fmt, clippy, test, security, docs]
    steps:
      - name: All checks passed
        run: echo "All CI checks passed successfully!"
